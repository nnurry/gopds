// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: meta.proto

package meta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BatchIngest_BatchIngest_FullMethodName = "/meta.BatchIngest/BatchIngest"
)

// BatchIngestClient is the client API for BatchIngest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ------------------------------------------------------------------------
// SERVICES
type BatchIngestClient interface {
	BatchIngest(ctx context.Context, opts ...grpc.CallOption) (BatchIngest_BatchIngestClient, error)
}

type batchIngestClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchIngestClient(cc grpc.ClientConnInterface) BatchIngestClient {
	return &batchIngestClient{cc}
}

func (c *batchIngestClient) BatchIngest(ctx context.Context, opts ...grpc.CallOption) (BatchIngest_BatchIngestClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BatchIngest_ServiceDesc.Streams[0], BatchIngest_BatchIngest_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &batchIngestBatchIngestClient{ClientStream: stream}
	return x, nil
}

type BatchIngest_BatchIngestClient interface {
	Send(*IngestRequest) error
	CloseAndRecv() (*BatchIngestResponse, error)
	grpc.ClientStream
}

type batchIngestBatchIngestClient struct {
	grpc.ClientStream
}

func (x *batchIngestBatchIngestClient) Send(m *IngestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *batchIngestBatchIngestClient) CloseAndRecv() (*BatchIngestResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BatchIngestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BatchIngestServer is the server API for BatchIngest service.
// All implementations must embed UnimplementedBatchIngestServer
// for forward compatibility
//
// ------------------------------------------------------------------------
// SERVICES
type BatchIngestServer interface {
	BatchIngest(BatchIngest_BatchIngestServer) error
	mustEmbedUnimplementedBatchIngestServer()
}

// UnimplementedBatchIngestServer must be embedded to have forward compatible implementations.
type UnimplementedBatchIngestServer struct {
}

func (UnimplementedBatchIngestServer) BatchIngest(BatchIngest_BatchIngestServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchIngest not implemented")
}
func (UnimplementedBatchIngestServer) mustEmbedUnimplementedBatchIngestServer() {}

// UnsafeBatchIngestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatchIngestServer will
// result in compilation errors.
type UnsafeBatchIngestServer interface {
	mustEmbedUnimplementedBatchIngestServer()
}

func RegisterBatchIngestServer(s grpc.ServiceRegistrar, srv BatchIngestServer) {
	s.RegisterService(&BatchIngest_ServiceDesc, srv)
}

func _BatchIngest_BatchIngest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BatchIngestServer).BatchIngest(&batchIngestBatchIngestServer{ServerStream: stream})
}

type BatchIngest_BatchIngestServer interface {
	SendAndClose(*BatchIngestResponse) error
	Recv() (*IngestRequest, error)
	grpc.ServerStream
}

type batchIngestBatchIngestServer struct {
	grpc.ServerStream
}

func (x *batchIngestBatchIngestServer) SendAndClose(m *BatchIngestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *batchIngestBatchIngestServer) Recv() (*IngestRequest, error) {
	m := new(IngestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BatchIngest_ServiceDesc is the grpc.ServiceDesc for BatchIngest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BatchIngest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meta.BatchIngest",
	HandlerType: (*BatchIngestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BatchIngest",
			Handler:       _BatchIngest_BatchIngest_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "meta.proto",
}
